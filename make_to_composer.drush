<?php

/**
 * @file Drush Make to Composer JSON
 */

// Get hacked make-ish functions and work out where our makefile is.
require __DIR__ . "/functions.inc";
$argv = drush_get_context('arguments');

// Parse .info file into nested arrays.
$make_info = make_parse_info_file($argv[2]);
// Convert this nested arrays into an internal format, at the same time
// looking up any metadata for all projects for which it is missing.
$internal_make_info = _make_projects_hacked(FALSE, "/tmp", $make_info, "/tmp", "/tmp");
// Merge libraries in
$internal_make_info['libraries'] = _make_libraries_hacked("/tmp", $make_info, "/tmp", "/tmp");

// Start composer file.
$composer = array(
  'repositories' => array(
  ),
  'require' => array(
    'composer/installers' => '~1.0',
  ),
);

foreach($internal_make_info as $supertype => $packages) {
  switch($supertype) {
    case "contrib":
      foreach($packages as $name => $package) {
        // Package version can be empty, even after autodiscovery.
        if ($package["version"] == "") {
          $package["version"] = str_replace($package["core"] . "-", "", $package['download']['full_version']);
        }

        // Assemble a composer package structure.
        $composer_package = array(
          "name" => "drupal/$name",
          "version" => $package['version'],
          "type" => "drupal-" . $package['type'],
        );
        $composer_package += _map_download_to_composer_dist($package['download']);

        $composer['repositories'][$name] = array(
          "type" => "package",
          "package" => $composer_package,
        );
        $composer['require'][$composer_package['name']] = $composer_package['version'];
      }
      break;

    case "libraries":
      foreach($packages as $name => $package) {
        // Libraries have no version that Drupal cares about.
        $package['version'] = "1.0";

        // Assemble a composer package structure.
        $composer_package = array(
          "name" => "library/$name",
          "version" => $package['version'],
          "type" => "drupal-" . $package['type'],
        );
        $composer_package += _map_download_to_composer_dist($package['download']);

        $composer['repositories'][$name] = array(
          "type" => "package",
          "package" => $composer_package,
        );
        $composer['require'][$composer_package['name']] = $composer_package['version'];
      }
      break;

    default:
      drush_log("Didn't deal with make section $supertype", "warning");
  }
}

print json_encode($composer, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES) . "\n";
